// Code generated by MockGen. DO NOT EDIT.
// Source: acessors.go
//
// Generated by this command:
//
//	mockgen -source acessors.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockproviderAccessor is a mock of providerAccessor interface.
type MockproviderAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockproviderAccessorMockRecorder
	isgomock struct{}
}

// MockproviderAccessorMockRecorder is the mock recorder for MockproviderAccessor.
type MockproviderAccessorMockRecorder struct {
	mock *MockproviderAccessor
}

// NewMockproviderAccessor creates a new mock instance.
func NewMockproviderAccessor(ctrl *gomock.Controller) *MockproviderAccessor {
	mock := &MockproviderAccessor{ctrl: ctrl}
	mock.recorder = &MockproviderAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproviderAccessor) EXPECT() *MockproviderAccessorMockRecorder {
	return m.recorder
}

// IsAvailable mocks base method.
func (m *MockproviderAccessor) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockproviderAccessorMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockproviderAccessor)(nil).IsAvailable))
}

// Name mocks base method.
func (m *MockproviderAccessor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockproviderAccessorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockproviderAccessor)(nil).Name))
}

// RequestMessage mocks base method.
func (m *MockproviderAccessor) RequestMessage(ctx context.Context, prompt string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestMessage", ctx, prompt)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestMessage indicates an expected call of RequestMessage.
func (mr *MockproviderAccessorMockRecorder) RequestMessage(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestMessage", reflect.TypeOf((*MockproviderAccessor)(nil).RequestMessage), ctx, prompt)
}

// MockuiAccessor is a mock of uiAccessor interface.
type MockuiAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockuiAccessorMockRecorder
	isgomock struct{}
}

// MockuiAccessorMockRecorder is the mock recorder for MockuiAccessor.
type MockuiAccessorMockRecorder struct {
	mock *MockuiAccessor
}

// NewMockuiAccessor creates a new mock instance.
func NewMockuiAccessor(ctrl *gomock.Controller) *MockuiAccessor {
	mock := &MockuiAccessor{ctrl: ctrl}
	mock.recorder = &MockuiAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuiAccessor) EXPECT() *MockuiAccessorMockRecorder {
	return m.recorder
}

// ShowInteractive mocks base method.
func (m *MockuiAccessor) ShowInteractive(suggestions map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowInteractive", suggestions)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowInteractive indicates an expected call of ShowInteractive.
func (mr *MockuiAccessorMockRecorder) ShowInteractive(suggestions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowInteractive", reflect.TypeOf((*MockuiAccessor)(nil).ShowInteractive), suggestions)
}
