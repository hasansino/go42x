// Code generated by MockGen. DO NOT EDIT.
// Source: acessors.go
//
// Generated by this command:
//
//	mockgen -source acessors.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTemplateEngineAccessor is a mock of TemplateEngineAccessor interface.
type MockTemplateEngineAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateEngineAccessorMockRecorder
	isgomock struct{}
}

// MockTemplateEngineAccessorMockRecorder is the mock recorder for MockTemplateEngineAccessor.
type MockTemplateEngineAccessorMockRecorder struct {
	mock *MockTemplateEngineAccessor
}

// NewMockTemplateEngineAccessor creates a new mock instance.
func NewMockTemplateEngineAccessor(ctrl *gomock.Controller) *MockTemplateEngineAccessor {
	mock := &MockTemplateEngineAccessor{ctrl: ctrl}
	mock.recorder = &MockTemplateEngineAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateEngineAccessor) EXPECT() *MockTemplateEngineAccessorMockRecorder {
	return m.recorder
}

// InjectChunks mocks base method.
func (m *MockTemplateEngineAccessor) InjectChunks(template, chunks string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectChunks", template, chunks)
	ret0, _ := ret[0].(string)
	return ret0
}

// InjectChunks indicates an expected call of InjectChunks.
func (mr *MockTemplateEngineAccessorMockRecorder) InjectChunks(template, chunks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectChunks", reflect.TypeOf((*MockTemplateEngineAccessor)(nil).InjectChunks), template, chunks)
}

// InjectModes mocks base method.
func (m *MockTemplateEngineAccessor) InjectModes(template, modes string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectModes", template, modes)
	ret0, _ := ret[0].(string)
	return ret0
}

// InjectModes indicates an expected call of InjectModes.
func (mr *MockTemplateEngineAccessorMockRecorder) InjectModes(template, modes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectModes", reflect.TypeOf((*MockTemplateEngineAccessor)(nil).InjectModes), template, modes)
}

// InjectWorkflows mocks base method.
func (m *MockTemplateEngineAccessor) InjectWorkflows(template, workflows string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectWorkflows", template, workflows)
	ret0, _ := ret[0].(string)
	return ret0
}

// InjectWorkflows indicates an expected call of InjectWorkflows.
func (mr *MockTemplateEngineAccessorMockRecorder) InjectWorkflows(template, workflows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectWorkflows", reflect.TypeOf((*MockTemplateEngineAccessor)(nil).InjectWorkflows), template, workflows)
}

// Process mocks base method.
func (m *MockTemplateEngineAccessor) Process(template string, ctxData map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", template, ctxData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockTemplateEngineAccessorMockRecorder) Process(template, ctxData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockTemplateEngineAccessor)(nil).Process), template, ctxData)
}
