// Code generated by MockGen. DO NOT EDIT.
// Source: acessors.go
//
// Generated by this command:
//
//	mockgen -source acessors.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/hasansino/go42x/pkg/agentenv/config"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorAccessor is a mock of CollectorAccessor interface.
type MockCollectorAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorAccessorMockRecorder
	isgomock struct{}
}

// MockCollectorAccessorMockRecorder is the mock recorder for MockCollectorAccessor.
type MockCollectorAccessorMockRecorder struct {
	mock *MockCollectorAccessor
}

// NewMockCollectorAccessor creates a new mock instance.
func NewMockCollectorAccessor(ctrl *gomock.Controller) *MockCollectorAccessor {
	mock := &MockCollectorAccessor{ctrl: ctrl}
	mock.recorder = &MockCollectorAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorAccessor) EXPECT() *MockCollectorAccessorMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockCollectorAccessor) Collect(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockCollectorAccessorMockRecorder) Collect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockCollectorAccessor)(nil).Collect), ctx)
}

// Name mocks base method.
func (m *MockCollectorAccessor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCollectorAccessorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCollectorAccessor)(nil).Name))
}

// Priority mocks base method.
func (m *MockCollectorAccessor) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockCollectorAccessorMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockCollectorAccessor)(nil).Priority))
}

// MockProviderAccessor is a mock of ProviderAccessor interface.
type MockProviderAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockProviderAccessorMockRecorder
	isgomock struct{}
}

// MockProviderAccessorMockRecorder is the mock recorder for MockProviderAccessor.
type MockProviderAccessorMockRecorder struct {
	mock *MockProviderAccessor
}

// NewMockProviderAccessor creates a new mock instance.
func NewMockProviderAccessor(ctrl *gomock.Controller) *MockProviderAccessor {
	mock := &MockProviderAccessor{ctrl: ctrl}
	mock.recorder = &MockProviderAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderAccessor) EXPECT() *MockProviderAccessorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockProviderAccessor) Generate(ctxData map[string]any, cfg config.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctxData, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockProviderAccessorMockRecorder) Generate(ctxData, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockProviderAccessor)(nil).Generate), ctxData, cfg)
}
