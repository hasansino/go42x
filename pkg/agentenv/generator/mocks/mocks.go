// Code generated by MockGen. DO NOT EDIT.
// Source: accessors.go
//
// Generated by this command:
//
//	mockgen -source accessors.go -package mocks -destination mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/hasansino/go42x/pkg/agentenv/config"
	gomock "go.uber.org/mock/gomock"
)

// MockcollectorAccessor is a mock of collectorAccessor interface.
type MockcollectorAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockcollectorAccessorMockRecorder
	isgomock struct{}
}

// MockcollectorAccessorMockRecorder is the mock recorder for MockcollectorAccessor.
type MockcollectorAccessorMockRecorder struct {
	mock *MockcollectorAccessor
}

// NewMockcollectorAccessor creates a new mock instance.
func NewMockcollectorAccessor(ctrl *gomock.Controller) *MockcollectorAccessor {
	mock := &MockcollectorAccessor{ctrl: ctrl}
	mock.recorder = &MockcollectorAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcollectorAccessor) EXPECT() *MockcollectorAccessorMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockcollectorAccessor) Collect(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockcollectorAccessorMockRecorder) Collect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockcollectorAccessor)(nil).Collect), ctx)
}

// Name mocks base method.
func (m *MockcollectorAccessor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockcollectorAccessorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockcollectorAccessor)(nil).Name))
}

// Priority mocks base method.
func (m *MockcollectorAccessor) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockcollectorAccessorMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockcollectorAccessor)(nil).Priority))
}

// MockproviderAccessor is a mock of providerAccessor interface.
type MockproviderAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockproviderAccessorMockRecorder
	isgomock struct{}
}

// MockproviderAccessorMockRecorder is the mock recorder for MockproviderAccessor.
type MockproviderAccessorMockRecorder struct {
	mock *MockproviderAccessor
}

// NewMockproviderAccessor creates a new mock instance.
func NewMockproviderAccessor(ctrl *gomock.Controller) *MockproviderAccessor {
	mock := &MockproviderAccessor{ctrl: ctrl}
	mock.recorder = &MockproviderAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproviderAccessor) EXPECT() *MockproviderAccessorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockproviderAccessor) Generate(ctxData map[string]any, cfg config.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctxData, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockproviderAccessorMockRecorder) Generate(ctxData, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockproviderAccessor)(nil).Generate), ctxData, cfg)
}
