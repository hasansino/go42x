---

name: docker-build

# Service packaging.
# Builds Dockerfile, which in turn builds golang binary.
# buildx allows building multi-arch images.
# Pushes image to ghcr.io.

on:
  workflow_dispatch:
    inputs:
      runs_on:
        required: true
        type: string
        default: ubuntu-latest
        description: "runs_on"
      continue_on_error:
        required: true
        type: boolean
        default: false
        description: "continue_on_error"
      service_name:
        required: true
        type: string
        description: "service_name"
      image_tag:
        required: true
        type: string
        description: "image_tag"
      tag_latest:
        required: false
        type: boolean
        description: "tag_latest"
      platforms:
        required: true
        type: choice
        options:
          - linux/amd64
          - linux/arm64
        description: "platforms"
      attestation:
        required: true
        type: boolean
        default: false
        description: "attestation"
      generate_sbom:
        required: true
        type: boolean
        default: false
        description: "generate_sbom"
      attestation_sbom:
        required: true
        type: boolean
        default: false
        description: "attestation_sbom"
  workflow_call:
    inputs:
      runs_on:
        required: true
        type: string
      continue_on_error:
        required: true
        type: boolean
      service_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      tag_latest:
        required: false
        type: boolean
      platforms:
        required: true
        type: string
      attestation:
        required: true
        type: boolean
      generate_sbom:
        required: true
        type: boolean
      attestation_sbom:
        required: true
        type: boolean

permissions: {}

jobs:
  # build image, pushes to ghcr.io and generates metadata
  docker-build:
    name: docker-build
    runs-on: ${{ inputs.runs_on }}
    continue-on-error: ${{ inputs.continue_on_error }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
      actions: read
    # ----
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      # ----
      - name: 'Extract Go version'
        run: echo "go_version=$(grep '^go ' go.mod | awk '{print $2}')" >> "$GITHUB_ENV"
      - name: 'Extract commit hash'
        run: echo "commit_hash=$(git rev-parse HEAD 2>/dev/null || echo '')" >> "$GITHUB_ENV"
      - name: 'Extract release tag'
        run: echo "release_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> "$GITHUB_ENV"
      # ----
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3
        with:
          cache-binary: true
      - name: 'Log in to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # ----
      # For single platform builds `index` annotations will fail - check and set levels accordingly.
      - name: 'Determine annotation levels'
        id: annotations-levels
        run: |
          platforms="${{ inputs.platforms }}"
          count=$(echo "$platforms" | awk -F',' '{print NF}')
          if [ "$count" -gt 1 ]; then
            echo "levels=manifest,index" >> "$GITHUB_OUTPUT"
          else
            echo "levels=manifest" >> "$GITHUB_OUTPUT"
          fi
      # Prepare tags, labels and annotations for the image.
      - name: 'Extract metadata'
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}
          flavor: |
            latest=${{ inputs.tag_latest }}
          # @see https://github.com/opencontainers/image-spec/blob/main/annotations.md
          labels: |
            org.opencontainers.image.title: ${{ inputs.service_name }}
            org.opencontainers.image.source: https://github.com/${{ github.repository_owner }}/${{ inputs.service_name }}
            org.opencontainers.image.url: https://github.com/${{ github.repository_owner }}/${{ inputs.service_name }}
            org.opencontainers.image.version: ${{ inputs.image_tag }}
            org.opencontainers.image.revision: ${{ env.commit_hash }}
            org.opencontainers.image.licenses: MIT
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ steps.annotations-levels.outputs.levels }}
      # ----
      - name: 'Build and push Docker image'
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ github.workspace }}/
          file: ${{ github.workspace }}/Dockerfile
          platforms: ${{ inputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            GO_VERSION=${{ env.go_version }}
            COMMIT_HASH=${{ env.commit_hash }}
            RELEASE_TAG=${{ env.release_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
        env:
          # This also will make images to show as created `55 years ago`.
          # @see https://reproducible-builds.org/docs/source-date-epoch/
          SOURCE_DATE_EPOCH: 0
          # @see https://github.com/orgs/community/discussions/45969
          BUILDX_NO_DEFAULT_ATTESTATIONS: true
      # ----
      - name: 'Generate SBOM'
        if: ${{ inputs.generate_sbom }}
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
          format: spdx-json
          output-file: sbom-${{ inputs.service_name }}-${{ inputs.image_tag }}.json
          # @see https://google.github.io/osv-scanner/usage/scan-source#sbom-scanning
          artifact-name: sbom-${{ inputs.service_name }}-${{ inputs.image_tag }}.spdx.json
          upload-artifact: true
      # ----
      - name: 'Attest build provenance'
        if: ${{ inputs.attestation }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
          subject-digest: ${{ steps.build.outputs.digest }}
          show-summary: true
      - name: 'Attest SBOM'
        if: ${{ inputs.attestation_sbom }}
        uses: actions/attest-sbom@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ inputs.service_name }}:${{ inputs.image_tag }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: sbom-${{ inputs.service_name }}-${{ inputs.image_tag }}.json
          show-summary: true
